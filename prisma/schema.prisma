// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum DeviceState {
  ACTIVE
  INACTIVE
  PROVISIONING
}

enum GroupRole {
  MEMBER
  ADMIN
  OWNER
}

model Dropzone {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  icaoCode    String?  // Airport identifier (e.g., "KSDM")
  latitude    Float    // Decimal degrees (North positive)
  longitude   Float    // Decimal degrees (East positive) 
  elevation   Float    // Meters MSL
  timezone    String   // e.g., "America/Los_Angeles"
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  formations  FormationSkydive[]

  @@index([slug])
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  slug      String   @unique
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isProxy   Boolean  @default(false)
  proxyCreatorId String?

  // Relations
  ownedDevices Device[] @relation("DeviceOwner")
  borrowedDevices Device[] @relation("DeviceLentTo")
  jumpLogs JumpLog[]
  groupMemberships GroupMember[]
  formationParticipations FormationParticipant[]
  invitationsSent UserInvitation[] @relation("InvitationsSent")
  invitationUsed UserInvitation? @relation("InvitationsUsed")
  proxyCreator User? @relation("ProxyCreator", fields: [proxyCreatorId], references: [id])
  createdProxies User[] @relation("ProxyCreator")

  @@index([email])
  @@index([slug])
  @@index([proxyCreatorId])
}

model Device {
  id          String      @id @default(cuid())
  bluetoothId String      @unique
  name        String
  state       DeviceState @default(ACTIVE)
  lastSeen    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lendingDuration    String?
  lendingStartedAt   DateTime?

  // Relations
  ownerId     String
  owner       User        @relation("DeviceOwner", fields: [ownerId], references: [id])
  lentToId    String?
  lentTo      User?       @relation("DeviceLentTo", fields: [lentToId], references: [id])
  jumpLogs    JumpLog[]
  fileIndex   DeviceFileIndex[] 

  @@index([bluetoothId])
  @@index([ownerId])
  @@index([lentToId])
}

model JumpLog {
  id          String   @id @default(cuid())
  hash        String   @unique
  storageUrl  String?  // Full URL to access the file
  storagePath String?  // Path in Supabase Storage bucket
  fileSize    Int      // Size in bytes
  mimeType    String   @default("application/octet-stream")
  offsets     Json
  flags       Json
  visibleToConnections Boolean @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Analysis fields
  initialAnalysisTimestamp DateTime? // When the analysis was completed
  initialAnalysisMessage   String?   // Any error or warning messages from analysis
  exitOffsetSec           Float?    // Offset in seconds to exit point
  deploymentOffsetSec     Float?    // Offset in seconds to deployment
  landingOffsetSec        Float?    // Offset in seconds to landing
  exitTimestampUTC        DateTime? // Calculated exit time
  exitLatitude            Float?    // Exit GPS latitude
  exitLongitude           Float?    // Exit GPS longitude
  exitAltitudeFt          Int?      // Exit altitude in feet
  deployAltitudeFt        Int?      // Deployment altitude in feet
  freefallTimeSec         Float?    // Total freefall time in seconds
  avgFallRateMph          Float?    // Average fall rate in mph

  // Relations
  deviceId    String
  device      Device   @relation(fields: [deviceId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  formationParticipant FormationParticipant?

  @@index([hash])
  @@index([deviceId])
  @@index([userId])
  @@index([createdAt])
  @@index([initialAnalysisTimestamp])
}

model DeviceFileIndex {
  id          String   @id @default(cuid())
  deviceId    String
  device      Device   @relation(fields: [deviceId], references: [id])
  fileName    String
  uploadedAt  DateTime @default(now())
  
  @@unique([deviceId, fileName])
  @@index([deviceId])
}

model Group {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     GroupMember[]
  invitations UserInvitation[]

  @@index([slug])
}

model GroupMember {
  id        String    @id @default(cuid())
  role      GroupRole @default(MEMBER)
  joinedAt  DateTime  @default(now())

  // Relations
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  groupId   String
  group     Group     @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model FormationSkydive {
  id              String   @id @default(cuid())
  name            String
  jumpTime        DateTime
  aircraft        String?
  altitude        Int?     // Exit altitude in feet
  notes           String?
  isPublic        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  participants    FormationParticipant[]
  dropzoneId  String?
  dropzone    Dropzone? @relation(fields: [dropzoneId], references: [id])

  @@index([jumpTime])
}

model FormationParticipant {
  id        String   @id @default(cuid())
  position  Int      // Position in formation (1-based)
  createdAt DateTime @default(now())

  // Relations
  formationId String
  formation   FormationSkydive @relation(fields: [formationId], references: [id])
  userId      String
  user        User @relation(fields: [userId], references: [id])
  jumpLogId   String @unique
  jumpLog     JumpLog @relation(fields: [jumpLogId], references: [id])

  @@unique([formationId, position])
  @@unique([formationId, userId])
  @@index([formationId])
  @@index([userId])
}

model UserInvitation {
  id          String   @id @default(cuid())
  email       String
  code        String   @unique
  groupId     String?
  groupRole   GroupRole? // Role they'll have if joining a group
  userRole    UserRole   @default(USER) // System role they'll have
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime   @default(now())

  // Relations
  invitedById String
  invitedBy   User       @relation("InvitationsSent", fields: [invitedById], references: [id])
  usedById    String?    @unique
  usedBy      User?      @relation("InvitationsUsed", fields: [usedById], references: [id])
  group       Group?     @relation(fields: [groupId], references: [id])

  @@index([code])
  @@index([email])
  @@index([invitedById])
}
