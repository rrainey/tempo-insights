# ===================================
# Tempo Insights Docker Compose
# ===================================
# This orchestrates the three application services:
# - tempo-web (Next.js web server)
# - tempo-bt-scanner (Bluetooth scanner worker)
# - tempo-analysis (Log analysis worker)
#
# Supabase stack runs separately in supabase-stack/
# 
# Usage:
#   docker compose up -d          # Start all services
#   docker compose logs -f        # View logs
#   docker compose ps             # Check status
#   docker compose down           # Stop all services

version: '3.8'

# ===================================
# NETWORKS
# ===================================
networks:
  tempo-network:
    driver: bridge
    name: tempo-network

# ===================================
# SERVICES
# ===================================
services:
  
  # -----------------------------------
  # Web Application (Next.js)
  # -----------------------------------
  tempo-web:
    image: tempo-web:latest
    container_name: tempo-web
    
    # Build configuration (if building locally)
    build:
      context: .
      dockerfile: docker/web/Dockerfile
      platforms:
        - linux/arm64
    
    # Network configuration
    networks:
      - tempo-network
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Environment variables
    env_file:
      - .env.docker
    
    environment:
      - NODE_ENV=production
      - PORT=3000
    
    # Dependencies
    depends_on:
      - db
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # -----------------------------------
  # Bluetooth Scanner Worker
  # -----------------------------------
  tempo-bt-scanner:
    image: tempo-bt-scanner:latest
    container_name: tempo-bt-scanner
    
    # Build configuration
    build:
      context: .
      dockerfile: docker/bluetooth-scanner/Dockerfile
      platforms:
        - linux/arm64
    
    # Network configuration - MUST use host mode for Bluetooth
    network_mode: host
    
    # Security capabilities for Bluetooth access
    cap_add:
      - NET_ADMIN
    cap_drop:
      - ALL
    
    # Device access for Bluetooth USB adapters
    devices:
      - /dev/bus/usb:/dev/bus/usb
    
    # Volume mounts
    volumes:
      # D-Bus socket for BlueZ communication
      - /run/dbus:/run/dbus:ro
      # smpmgr plugins
      - ./smpmgr-extensions/plugins:/opt/smpmgr-extensions/plugins:ro
    
    # Environment variables
    env_file:
      - .env.docker
    
    environment:
      - NODE_ENV=production
      - SMPMGR_PLUGIN_PATH=/opt/smpmgr-extensions/plugins
    
    # Dependencies
    depends_on:
      - db
      - tempo-web
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # -----------------------------------
  # Analysis Worker
  # -----------------------------------
  tempo-analysis:
    image: tempo-analysis:latest
    container_name: tempo-analysis
    
    # Build configuration
    build:
      context: .
      dockerfile: docker/analysis-worker/Dockerfile
      platforms:
        - linux/arm64
    
    # Network configuration
    networks:
      - tempo-network
    
    # No ports exposed (background worker)
    
    # Environment variables
    env_file:
      - .env.docker
    
    environment:
      - NODE_ENV=production
    
    # Dependencies
    depends_on:
      - db
      - tempo-web
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # -----------------------------------
  # Database Proxy (Reference to Supabase)
  # -----------------------------------
  # This is a reference to the Supabase PostgreSQL instance
  # The actual database runs in supabase-stack/
  # Services connect via the tempo-network bridge
  db:
    image: postgres:15-alpine
    container_name: tempo-db-proxy
    
    # This is just a placeholder service definition
    # The real database is in supabase-stack/docker-compose.yml
    # We use external network connection instead
    command: echo "Database runs in supabase-stack - this is a placeholder"
    
    networks:
      - tempo-network
    
    # Mark as external (managed separately)
    restart: "no"

# ===================================
# CONFIGURATION NOTES
# ===================================
# 
# Database Connection:
# -------------------
# Services connect to Supabase PostgreSQL at:
#   - Host: postgres (container name from supabase-stack)
#   - Port: 5432 (internal Docker network)
#   - External: localhost:54322 (from host machine)
#
# To connect both stacks:
# 1. Start Supabase first: cd supabase-stack && docker compose up -d
# 2. Connect networks: docker network connect tempo-network kong
# 3. Start app: docker compose up -d
#
# Or use configure-instance.sh which handles this automatically.
#
# Bluetooth Scanner:
# ------------------
# - Runs with network_mode: host for HCI socket access
# - Requires host BlueZ service running: systemctl start bluetooth
# - Cannot use standard Docker networking (limitation of Bluetooth)
#
# Health & Monitoring:
# --------------------
# - Web service has built-in health check
# - Workers log heartbeat every 30-60 seconds
# - View logs: docker compose logs -f [service-name]
#
# Volumes & Persistence:
# ----------------------
# - All persistent data in supabase-stack/volumes/
# - No application volumes needed (workers are stateless)
# - Logs rotate automatically (10MB max, 3 files)