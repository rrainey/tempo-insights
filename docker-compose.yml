# ===================================
# Tempo Insights Docker Compose
# ===================================
# This orchestrates the three application services:
# - tempo-web (Next.js web server)
# - tempo-bt-scanner (Bluetooth scanner worker)
# - tempo-analysis (Log analysis worker)
#
# Supabase stack runs separately in supabase/docker-compose.yml
# All services connect to Supabase via the supabase_default network
# 
# Usage:
#   docker compose up -d          # Start all services
#   docker compose logs -f        # View logs
#   docker compose ps             # Check status
#   docker compose down           # Stop all services

version: '3.8'

# ===================================
# NETWORKS
# ===================================
# Connect to the external Supabase network
networks:
  supabase_default:
    external: true
    name: supabase_default

# ===================================
# SERVICES
# ===================================
services:
  
  # -----------------------------------
  # Web Application (Next.js)
  # -----------------------------------
  tempo-web:
    image: tempo-web:latest
    container_name: tempo-web
    
    # Build configuration (if building locally)
    build:
      context: .
      dockerfile: docker/web/Dockerfile
      platforms:
        - linux/arm64
    
    # Network configuration - connect to Supabase network
    networks:
      - supabase_default
    
    # Port mapping
    ports:
      - "3000:3000"
    
    # Environment variables
    env_file:
      - .env.docker
    
    environment:
      - NODE_ENV=production
      - PORT=3000
    
    # Health check
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # -----------------------------------
  # Bluetooth Scanner Worker
  # -----------------------------------
  tempo-bt-scanner:
    image: tempo-bt-scanner:latest
    container_name: tempo-bt-scanner

    build:
      context: .
      dockerfile: docker/bluetooth-scanner/Dockerfile
      platforms:
        - linux/arm64
    
    # Keep these for Bluetooth hardware access
    userns_mode: host
    network_mode: host
    
    cap_add:
      - NET_ADMIN
      - SYS_ADMIN  # Needed for D-Bus inside container
    cap_drop:
      - ALL
    
    devices:
      - /dev/bus/usb:/dev/bus/usb
    
    volumes:
      # Remove D-Bus socket mount - using internal D-Bus now
      # Keep only plugins
      - ./smpmgr-extensions/plugins:/opt/smpmgr-extensions/plugins:ro
    
    env_file:
      - .env.docker.bt-scanner
    
    environment:
      - NODE_ENV=production
      - SMPMGR_PLUGIN_PATH=/opt/smpmgr-extensions/plugins
      # No DBUS_SYSTEM_BUS_ADDRESS - using internal D-Bus
    
    restart: unless-stopped
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  
  # -----------------------------------
  # Analysis Worker
  # -----------------------------------
  tempo-analysis:
    image: tempo-analysis:latest
    container_name: tempo-analysis
    
    # Build configuration
    build:
      context: .
      dockerfile: docker/analysis-worker/Dockerfile
      platforms:
        - linux/arm64
    
    # Network configuration - connect to Supabase network
    networks:
      - supabase_default
    
    # No ports exposed (background worker)
    
    # Environment variables
    env_file:
      - .env.docker
    
    environment:
      - NODE_ENV=production
    
    # Restart policy
    restart: unless-stopped
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ===================================
# CONFIGURATION NOTES
# ===================================
# 
# Database Connection:
# -------------------
# Services connect to Supabase PostgreSQL using different hostnames
# based on their network mode:
#
#   tempo-web & tempo-analysis (on supabase_default network):
#     DATABASE_URL=postgresql://postgres:password@supabase-db:5432/postgres
#
#   tempo-bt-scanner (network_mode: host):
#     DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
#
# Prerequisites:
# --------------
# 1. Supabase must be running first:
#      cd supabase && docker compose up -d
#
# 2. Verify supabase_default network exists:
#      docker network ls | grep supabase_default
#
# 3. Then start Tempo services:
#      docker compose up -d
#
# Bluetooth Scanner:
# ------------------
# - Runs with network_mode: host for HCI socket access
# - Requires host BlueZ service running: systemctl start bluetooth
# - Cannot use standard Docker networking (limitation of Bluetooth)
# - Uses separate .env.docker.bt-scanner with localhost DATABASE_URL
#
# Health & Monitoring:
# --------------------
# - Web service has built-in health check
# - Workers log heartbeat every 30-60 seconds
# - View logs: docker compose logs -f [service-name]
#
# Volumes & Persistence:
# ----------------------
# - All persistent data in supabase/volumes/
# - No application volumes needed (workers are stateless)
# - Logs rotate automatically (10MB max, 3 files)